"""
parametros:
    problema
    granularidad
    ultimo
    cantidad_muestras
"""
import random
import sys
import os
import subprocess
from collections import defaultdict
import cProfile
import copy

import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
import math

try:
    binario = sys.argv[1]
    min_n = int(sys.argv[2])
    max_n = int(sys.argv[3])
    granularidad_n = int(sys.argv[4])
    cuantas_mediciones = int(sys.argv[8])
except:
    "Error leyendo sys.argv"


def grafo_random(n, m):
    kn = [(i, j) for i in range(n) for j in range(n) if i < j]
    return random.sample(kn, m)

def generar_string(grafo1, n1, grafo2, n2):
    string = ""
    string += str(n1) + " " + str(len(grafo1)) + " "
    string += str(n2) + " " + str(len(grafo2))
    string += "\n"
    for i, j in grafo1:
        string += str(i) + " " + str(j) + "\n"
    for i, j in grafo2:
        string += str(i) + " " + str(j) + "\n"
    return string

def correr_programa(binario, input_string):
    p = subprocess.Popen(binario,
                         shell = True,
                         stdin=subprocess.PIPE,
                         stderr=subprocess.PIPE, stdout=subprocess.PIPE)
    p.stdin.write(input_string)
    out, err = p.communicate()
    return 1000000 * float(err)

def mean(xs):
    if len(xs) == 0:
        return 0.0
    else:
        suma = 0.0
        for x in xs:
            suma += x
        return suma / len(xs)

def median(xs):
    xs.sort()
    return xs[len(xs) / 2]

def mover_n(desde, hasta, granularidad, i):
    datos = {}
    m1 = desde * (desde - 1) / 2
    n2 = random.randint(1, hasta)
    m2 = random.randint(1, n2 * (n2 - 1) / 2 )
    for n1 in range(desde, hasta + 1, granularidad):
        g1 = grafo_random(n1, m1)
        mediciones = []
        for medicion in range(cuantas_mediciones):
            input_string = ""
            if i == 1:
                input_string = generar_string(g1, n1, grafo_random(n2, m2), n2)
            else:
                input_string = generar_string(grafo_random(n2, m2), n2, g1, n1)
            mediciones.append(
                min([correr_programa(binario, input_string) for _ in range(10)]))
        datos[n1] = median(mediciones)
    return datos

def mover_m(desde, hasta, granularidad, i):
    datos = {}
    n1 = 2 * int(math.sqrt(hasta)) + 1
    m2 = random.randint(1, hasta)
    n2 = 2 * int(math.sqrt(m2)) + 1
    for m1 in range(desde, hasta + 1, granularidad):
        g1 = grafo_random(n1, m1)
        mediciones = []
        for medicion in range(cuantas_mediciones):
            input_string = ""
            if i == 1:
                input_string = generar_string(g1, n1, grafo_random(n2, m2), n2)
            else:
                input_string = generar_string(grafo_random(n2, m2), n2, g1, n1)
            mediciones.append(
                min([correr_programa(binario, input_string) for _ in range(10)]))
        datos[m1] = median(mediciones)
    return datos

def general(min_n, max_n, m):
    datos = defaultdict(list)
    for _ in range(m):
        n2 = 150 #random.randint(50, 200) #random.randint(5, 15) #random.randint(min_n, max_n)
        m2 = 1000 # random.randint(1000, 1050) #random.randint(1, n2 * (n2 - 1) / 2)
        n1 = random.randint(2, 149) #random.randint(min_n, max_n)
        m1 = n1 * (n1 - 1) / 2 #random.randint(1, n1 * (n1 - 1) / 2)
        g1 = grafo_random(n1, m1)

        input_string = generar_string(
                grafo_random(n1, m1), n1,
                grafo_random(n2, m2), n2)
        datos[(n1, m1, n2, m2)].append(
                min([correr_programa(binario, input_string) for _ in range(20)]))

    return datos


def graficar(posiciones, datos, f, texto):
    puntos = zip(map(float, posiciones), map(median, datos))
    k = encontrar_k(puntos, lambda n: f(n))
    k *= 1.2
    posiciones_ints = map(int, posiciones)

    plt.figure()
    #plt.subplot(1,2,1)
    plt.plot(posiciones_ints, map(median, datos), label="Nuestro algoritmo")
    plt.plot(posiciones_ints, map(lambda n: k * f(n), posiciones_ints),
            label=str(k)[:5] + " * " + texto)
    plt.ylabel("Tiempo (us)")
    plt.xlabel("Tamano de la entrada")
    plt.legend(loc=2)

    plt.savefig("fig.pdf")
    plt.show()


def graficar_problema2():
    resultados = defaultdict(list,
            {
                (5, 9, 9, 3): [221.345],
                (5, 3, 10, 25): [327.514],
                (1, 0, 5, 2): [19.329],
                (8, 24, 2, 0): [21.631999999999998],
                (4, 0, 1, 0): [18.851999999999997],
                (4, 0, 4, 3): [20.298000000000002],
                (4, 1, 4, 3): [23.298000000000002],
                (6, 13, 2, 0): [22.557000000000002],
                (5, 7, 4, 0): [21.060000000000002],
                (9, 25, 5, 1): [207.82],
                (9, 20, 4, 1): [187.298000000000002],
                (6, 11, 6, 14): [165.802],
                (7, 12, 7, 14): [230.851999999999997],
            })

    puntos = map(
            lambda (n1, m1, n2, m2) :
                ((4*n1*n2)**(n1+1),
                median(resultados[(n1, m1, n2, m2)]) / (4*n1*n2)**(n1+1)),
            resultados.keys())
    puntos = sorted(puntos, key=lambda tup: tup[0])
    print puntos


    plt.figure()
    plt.title("Algoritmo exacto")
    plt.plot(map(lambda tup: tup[0], puntos),
             map(lambda tup: tup[1], puntos),
            label="Nuestro algoritmo",
            marker=".")
    plt.ylabel("Tiempo (us) / (4n_1n_2)^(n_1+1)")
    plt.xlabel("Tamano de la entrada (4n_1n_2)^(n_1+1)")
    plt.xscale('log')
    plt.yscale('log')
    plt.legend(loc=2)

    plt.savefig("fig.pdf")
    plt.show()


def graficar_problema2_n1fijo():
    resultados = defaultdict(list,
        {(5, 10, 10, 10): [429080.0, 434931.0, 436772.0, 424397.0, 423620.0], (5, 10, 7, 10): [45445.2, 44716.8, 48723.799999999996], (5, 10, 14, 10): [3472010.0, 3473720.0, 3465440.0], (5, 10, 11, 10): [745540.0, 754194.0, 763944.0, 760932.0], (5, 10, 6, 10): [17312.2, 17602.1], (5, 10, 13, 10): [2203830.0, 2126700.0, 2136770.0], (5, 10, 8, 10): [108205.0, 104327.0, 101799.0, 104349.0], (5, 10, 5, 10): [143.48499999999999, 132.69], (5, 10, 15, 10): [5176910.0], (5, 10, 12, 10):
            [1326980.0], (5, 10, 9, 10): [216499.0, 214991.0]})

    puntos = map(
            lambda (n1, m1, n2, m2) : (
                n2,
                median(resultados[(n1, m1, n2, m2)])),
            resultados.keys())

    puntos_dict = {}
    for (n2, tiempos) in puntos:
        puntos_dict[n2] = []
    for (n2, t) in puntos:
        puntos_dict[n2].append(t)

    puntos = sorted(
            map(
                lambda n2: (n2, min(puntos_dict[n2])/1000),
                puntos_dict.keys()),
            key=lambda tup: tup[0])

    print puntos

    plt.figure()
    plt.title("Algoritmo exacto (n_1 = 5)")
    #k = encontrar_k(puntos, lambda x: x**6)
    k1 = 0.0005
    k2 = 0.0004
    plt.plot(map(lambda tup: tup[0], puntos),
             map(lambda tup: tup[1], puntos),
            label="Nuestro algoritmo",
            marker=".")
    plt.plot(map(lambda tup: tup[0], puntos),
            map(lambda tup: k1 * (tup[0]**6), puntos),
             label=str(k1) + "* n_2^6"
             )
    plt.plot(map(lambda tup: tup[0], puntos),
            map(lambda tup: k2 * (tup[0]**6), puntos),
             label=str(k2) + "* n_2^6"
             )
    plt.ylabel("Tiempo (ms)")
    plt.xlabel("Tamano de la entrada (n_2)")
    plt.ylim(0, 5176.9100*1.2)
    plt.legend(loc=2)

    plt.savefig("fig.pdf")
    plt.show()

def graficar_problema4():
    resultados = defaultdict(list,
            {
                (49, 513, 12, 42): [67.753],
                (31, 138, 11, 44): [37.772], (8, 12, 10, 8): [18.876], (26, 108, 15, 90): [35.895], (50, 771, 12, 50): [65.49499999999999],
                (47, 889, 11, 34): [52.597], (4, 6, 7, 2): [13.673], (37, 582, 5, 2): [34.304], (29, 322, 6, 4): [31.318], (11, 22, 15, 15): [22.568], (37, 633, 11, 33): [37.685], (35, 56, 10, 40): [35.317], (37, 12, 15, 6): [37.184000000000005], (15, 70, 6, 1): [20.163999999999998], (17, 116, 11, 24): [25.663],
                (47, 506, 8, 2): [61.816], (35, 427, 14, 66): [44.848], (43, 211, 12, 3): [48.364], (47, 806, 15, 70): [59.395], (11, 42, 9, 27): [20.104], (39, 259, 13, 2): [49.089999999999996], (45, 119, 6, 5): [41.632], (37, 577, 14, 2): [39.297], (4, 4, 15, 44): [20.05], (42, 479, 10, 43): [57.333999999999996],
                (24, 157, 15, 103): [34.706], (13, 74, 12, 65): [20.784999999999997], (40, 27, 12, 16): [39.653999999999996], (9, 36, 15, 6): [20.461],
                (14, 14, 14, 85): [23.909000000000002], (41, 346, 7, 18): [50.266000000000005], (18, 136, 5, 9): [20.557], (33, 170, 6, 2): [37.344], (15, 90, 12, 38): [25.329], (44, 575, 9, 10): [57.871], (18, 122, 7, 10): [23.518], (29, 5, 11, 19): [31.041000000000004], (50, 1174, 15, 27): [51.667], (24, 258, 10, 32): [27.192999999999998], (23, 154, 10, 4): [29.663999999999998], (9, 36, 11, 40): [19.197], (8, 17, 14, 21): [21.057],
                (46, 60, 6, 7): [40.814],
                (35, 553, 14, 37): [38.379],
                (20, 25, 6, 11): [22.549],
                (48, 713, 12, 19): [64.303], (36, 186, 15, 101): [46.159000000000006], (27, 151, 11, 23): [35.978], (47, 298, 11, 33): [57.006],
                (34, 293, 12, 29): [46.004999999999995], (39, 59, 11, 20): [39.095], (11, 26, 10, 8): [20.756], (38, 595, 6, 14): [37.738], (38, 127, 6, 15): [37.758],
                (14, 16, 6, 6): [19.028000000000002], (38, 424, 13, 74): [49.794], (14, 4, 11, 7): [20.766000000000002], (12, 31, 6, 11): [19.578000000000003],
                (15, 39, 15, 47): [28.558],
                (9, 4, 10, 14): [18.537], (45, 259, 12, 37): [56.49], (6, 13, 13, 42): [19.441], (29, 32, 7, 5): [31.092], (45, 674, 7, 12): [54.21],
                (49, 618, 12, 5): [67.066], (47, 618, 5, 3): [59.553], (32, 81, 14, 85): [36.379], (13, 67, 8, 24): [19.855], (13, 51, 11, 51): [21.970000000000002], (41, 127, 13, 6): [43.793], (29, 196, 14, 38): [41.998], (9, 27, 5, 7): [15.841999999999999], (45, 437, 11, 47): [60.235],
                (18, 3, 7, 18): [20.288999999999998], (31, 305, 13, 69): [40.516999999999996], (14, 77, 13, 5): [23.445999999999998], (50, 1145, 12, 54): [48.928000000000004], (25, 181, 8, 17): [32.436], (50, 984, 10, 33): [55.827], (4, 6, 12, 31): [17.646], (23, 17, 15, 7): [27.78], (33, 305, 6, 5): [39.791], (48, 938, 9, 16): [51.032000000000004], (30, 92, 11, 5): [34.016], (25, 284, 7, 3): [26.200999999999997], (30, 434, 6, 11): [27.129],
                (44, 920, 12, 4): [41.615],
                (49, 599, 8, 7): [64.83], (39, 166, 13, 53): [46.772], (34, 170, 14, 80): [42.870000000000005],
                (17, 11, 12, 53): [25.006999999999998], (8, 15, 8, 23): [17.615], (34, 109, 11, 34): [39.174], (30, 429, 7, 21): [28.164], (4, 5, 15, 82): [19.569],
                (16, 48, 14, 44): [28.698], (9, 27, 7, 13): [18.619], (28, 271, 12, 24): [37.434000000000005], (47, 21, 10, 27): [43.442], (48, 1033, 6, 7): [44.661]
            })

    puntos = map(
            lambda (n1, m1, n2, m2) :
                (n1**4 * n2,
                median(resultados[(n1, m1, n2, m2)]) / (n1**4 * n2)),
            resultados.keys())
    puntos = sorted(puntos, key=lambda tup: tup[0])
    print puntos


    plt.figure()
    plt.title("Algoritmo goloso")
    plt.plot(map(lambda tup: tup[0], puntos),
             map(lambda tup: tup[1], puntos),
            label="Nuestro algoritmo",
            marker=".")
    plt.ylabel("Tiempo (us) / (n_1^4  n_2)")
    plt.xlabel("Tamano de la entrada (n_1^4  n_2)")
    plt.xscale('log')
    plt.yscale('log')
    plt.legend(loc=2)

    plt.savefig("fig.pdf")
    plt.show()


def graficar_problema4_n1fijo():
    resultados = defaultdict(list,
            {
(50, 1000, 115, 1010): [140.732], (50, 1000, 170, 1011): [161.569], (50, 1000, 88, 1003): [109.625], (50, 1000, 145, 1034): [120.97200000000001], (50, 1000, 68, 1043): [83.104], (50, 1000, 121, 1002): [149.53199999999998], (50, 1000, 136, 1043): [107.052], (50, 1000, 120, 1029): [147.57999999999998], (50, 1000, 74, 1021): [91.887], (50, 1000, 64, 1001): [76.411], (50, 1000, 69, 1007): [84.866], (50, 1000, 180, 1004): [173.869], (50, 1000, 69, 1001): [84.371], (50, 1000, 61, 1002): [143.781], (50, 1000, 77, 1043): [96.85], (50, 1000, 186, 1032): [183.39600000000002], (50, 1000, 134, 1033): [105.518], (50, 1000, 112, 1001): [144.499], (50, 1000, 130, 1009): [98.854], (50, 1000, 154, 1024): [133.987], (50, 1000, 125, 1028): [154.911], (50, 1000, 86, 1033): [105.351], (50, 1000, 118, 1046): [145.422], (50, 1000, 96, 1035): [117.97], (50, 1000, 119, 1040): [145.821], (50, 1000, 63, 1031): [139.167], (50, 1000, 76, 1029): [95.931], (50, 1000, 149, 1001): [125.394], (50, 1000, 54, 1050): [110.63199999999999], (50, 1000, 95, 1040): [116.372], (50, 1000, 63, 1044): [139.774], (50, 1000, 88, 1005): [110.884], (50, 1000, 100, 1050): [124.625], (50, 1000, 155, 1002): [135.96300000000002], (50, 1000, 170, 1047): [156.78799999999998], (50, 1000, 177, 1034): [168.71099999999998], (50, 1000, 195, 1001): [125.36], (50, 1000, 64, 1018): [78.53099999999999], (50, 1000, 150, 1042): [128.513], (50, 1000, 98, 1048): [120.631], (50, 1000, 178, 1015): [170.15699999999998], (50, 1000, 95, 1021): [121.133], (50, 1000, 83, 1002): [102.269], (50, 1000, 84, 1050): [106.011], (50, 1000, 171, 1005): [159.643], (50, 1000, 104, 1012): [129.253], (50, 1000, 94, 1039): [117.95599999999999], (50, 1000, 190, 1008): [200.87199999999999], (50, 1000, 151, 1030): [129.981], (50, 1000, 134, 1019): [103.124], (50, 1000, 184, 1039): [186.518], (50, 1000, 62, 1017): [136.696], (50, 1000, 82, 1017): [102.13300000000001], (50, 1000, 79, 1021): [98.786], (50, 1000, 126, 1018): [154.852], (50, 1000, 158, 1039): [137.555], (50, 1000, 104, 1042): [126.78999999999999], (50, 1000, 88, 1011): [109.825], (50, 1000, 195, 1037): [124.379], (50, 1000, 78, 1035): [97.73299999999999], (50, 1000, 180, 1024): [173.867], (50, 1000, 93, 1015): [115.59400000000001], (50, 1000, 182, 1027): [176.245], (50, 1000, 136, 1022): [106.65], (50, 1000, 191, 1018): [196.03799999999998], (50, 1000, 150, 1012): [127.06800000000001], (50, 1000, 119, 1030): [149.35999999999999], (50, 1000, 107, 1022): [132.56199999999998], (50, 1000, 51, 1026): [106.893], (50, 1000, 200, 1033): [129.714], (50, 1000, 189, 1026): [191.152], (50, 1000, 85, 1020): [106.49199999999999], (50, 1000, 58, 1041): [123.93699999999998], (50, 1000, 122, 1031): [150.041], (50, 1000, 108, 1017): [132.568], (50, 1000, 108, 1006): [133.96], (50, 1000, 130, 1030): [98.44800000000001], (50, 1000, 107, 1047): [133.621], (50, 1000, 134, 1012): [105.435], (50, 1000, 177, 1012): [169.316], (50, 1000, 67, 1012): [81.13799999999999], (50, 1000, 164, 1042): [146.369], (50, 1000, 103, 1024): [125.59299999999999], (50, 1000, 84, 1025): [105.226], (50, 1000, 60, 1048): [132.688], (50, 1000, 177, 1003): [168.436], (50, 1000, 61, 1041): [145.612], (50, 1000, 110, 1032): [135.14000000000001], (50, 1000, 57, 1028): [121.32], (50, 1000, 188, 1044): [192.852], (50, 1000, 95, 1025): [118.512], (50, 1000, 113, 1029): [139.546], (50, 1000, 140, 1050): [113.544], (50, 1000, 200, 1007): [133.886], (50, 1000, 55, 1041): [114.88], (50, 1000, 94, 1043): [117.17999999999999], (50, 1000, 172, 1043): [160.44299999999998], (50, 1000, 172, 1046): [161.481], (50, 1000, 98, 1039): [119.715], (50, 1000, 122, 1042): [149.334]})

    puntos = map(
            lambda (n1, m1, n2, m2) : (
                n2,
                median(resultados[(n1, m1, n2, m2)])),
            resultados.keys())

    puntos_dict = {}
    for (n2, tiempos) in puntos:
        puntos_dict[n2] = []
    for (n2, t) in puntos:
        puntos_dict[n2].append(t)

    puntos = sorted(
            map(
                lambda n2: (n2, min(puntos_dict[n2])/1000),
                puntos_dict.keys()),
            key=lambda tup: tup[0])

    print puntos

    plt.figure()
    plt.title("Algoritmo goloso (n_1 = 50)")
    #k = encontrar_k(puntos, lambda x: x**6)
    k1 = 0.00045
    k2 = 0.00035
    plt.plot(map(lambda tup: tup[0], puntos),
             map(lambda tup: tup[1], puntos),
            label="Nuestro algoritmo",
            marker=".")
    plt.plot(map(lambda tup: tup[0], puntos),
            map(lambda tup: k1 * (tup[0]) + 0.12, puntos),
             label=str(k1) + "* n_2"
             )
    plt.plot(map(lambda tup: tup[0], puntos),
            map(lambda tup: k2 * (tup[0]) + 0.05, puntos),
             label=str(k2) + "* n_2"
             )
    plt.ylabel("Tiempo (ms)")
    plt.xlabel("Tamano de la entrada (n_2)")
    plt.legend(loc=2)

    plt.savefig("fig.pdf")
    plt.show()

def graficar_problema4_n2fijo():
    resultados = defaultdict(list,
        {
            (74, 2701, 150, 1000): [117.53699999999999], (104, 5356, 150, 1000): [158.56], (142, 10011, 150, 1000): [181.86100000000002, 182.077], (90, 4005, 150, 1000): [138.41, 137.70000000000002], (108, 5778, 150, 1000): [165.87199999999999], (118, 6903, 150, 1000): [185.77, 186.691], (143, 10153, 150, 1000): [184.29399999999998], (42, 861, 150, 1000): [106.00800000000001], (66, 2145, 150, 1000): [110.801], (55, 1485, 150, 1000): [124.43799999999999,
                122.06099999999999], (52, 1326, 150, 1000): [116.586], (125, 7750, 150, 1000): [198.354], (122, 7381, 150, 1000): [193.115, 192.799], (128, 8128, 150, 1000): [158.918], (9, 36, 150, 1000): [81.47500000000001, 81.966], (7, 21, 150, 1000): [81.125], (141, 9870, 150, 1000): [178.149], (111, 6105, 150, 1000): [174.257, 174.369], (97, 4656, 150, 1000): [150.27700000000002, 144.06099999999998], (76, 2850, 150, 1000): [119.92999999999999], (149, 11026, 150, 1000):
            [195.72299999999998, 195.351], (48, 1128, 150, 1000): [109.882, 111.265], (93, 4278, 150, 1000): [142.713, 141.59099999999998, 142.55800000000002, 142.836], (101, 5050, 150, 1000): [154.862], (113, 6328, 150, 1000): [176.514], (54, 1431, 150, 1000): [120.639], (35, 595, 150, 1000): [98.974, 99.47699999999999], (94, 4371, 150, 1000): [144.051], (38, 703, 150, 1000): [102.511, 103.148], (144, 10296, 150, 1000): [187.42499999999998, 186.73100000000002],
            (25, 300, 150, 1000): [89.787], (61, 1830, 150, 1000): [124.71], (24, 276, 150, 1000): [88.489], (17, 136, 150, 1000): [88.79599999999999, 86.562], (3, 3, 150, 1000): [77.509, 79.159, 78.198], (64, 2016, 150, 1000): [107.642], (119, 7021, 150, 1000): [187.947, 188.749], (33, 528, 150, 1000): [96.312], (85, 3570, 150, 1000): [131.81900000000002], (87, 3741, 150, 1000): [134.869], (20, 190, 150, 1000): [88.54100000000001], (14, 91, 150, 1000): [83.251], (49, 1176,
                150, 1000): [112.79499999999999], (146, 10585, 150, 1000): [190.118, 188.503], (109, 5886, 150, 1000): [169.077], (8, 28, 150, 1000): [80.55799999999999], (28, 378, 150, 1000): [93.245], (80, 3160, 150, 1000): [124.281], (89, 3916, 150, 1000): [135.787], (83, 3403, 150, 1000): [127.71200000000002, 129.454], (70, 2415, 150, 1000): [112.86, 115.382, 114.342], (43, 903, 150, 1000): [107.236], (22, 231, 150, 1000): [89.82700000000001], (132, 8646,
                    150, 1000): [165.856], (10, 45, 150, 1000): [82.915], (140, 9730, 150, 1000): [178.709], (21, 210, 150, 1000): [88.281], (23, 253, 150, 1000): [88.80199999999999], (57, 1596, 150, 1000): [121.648], (15, 105, 150, 1000): [85.271, 84.994], (41, 820, 150, 1000): [104.677, 103.809], (5, 10, 150, 1000): [78.82300000000001, 79.50099999999999, 79.52300000000001], (82, 3321, 150, 1000): [127.24399999999999, 128.22899999999998], (45, 990, 150, 1000): [108.067], (117,
                        6786, 150, 1000): [184.274], (116, 6670, 150, 1000): [182.17499999999998], (107, 5671, 150, 1000): [164.835, 160.705], (37, 666, 150, 1000): [99.81599999999999], (26, 325, 150, 1000): [89.329], (50, 1225, 150, 1000): [113.718]})
    puntos = map(
            lambda (n1, m1, n2, m2) : (
                n1,
                median(resultados[(n1, m1, n2, m2)])),
            resultados.keys())

    puntos_dict = {}
    for (n1, tiempos) in puntos:
        puntos_dict[n1] = []
    for (n1, t) in puntos:
        puntos_dict[n1].append(t)

    puntos = sorted(
            map(
                lambda n1: (n1, min(puntos_dict[n1])/1000),
                puntos_dict.keys()),
            key=lambda tup: tup[0])

    print puntos

    plt.figure()
    plt.title("Algoritmo goloso (n_2 = 150)")
    #k = encontrar_k(puntos, lambda x: x**6)
    k1 = 0.0000000004
    plt.plot(map(lambda tup: tup[0], puntos),
             map(lambda tup: tup[1], puntos),
            label="Nuestro algoritmo",
            marker=".")
    plt.plot(map(lambda tup: tup[0], puntos),
            map(lambda tup: k1 * (tup[0]**4) + 0.14, puntos),
             label=str(k1) + " * n_1^4"
             )
    plt.ylabel("Tiempo (ms)")
    plt.xlabel("Tamano de la entrada (n_1)")
    plt.legend(loc=2)

    plt.savefig("fig.pdf")
    plt.show()


def generar_m(n):
    aristas = 0
    for i in range(n-1):
        if random.random() > 0.5:
            aristas += (i+1)
    return aristas



def generar_chamuyo():
    resultados = {}
    for _ in range(40):
        n = 200
        m = generar_m(n)
        tiempo = random.gauss(float(30.123 + m*n), 113423.4) * 8.543245
        resultados[m] = [tiempo]
    return resultados




def graficar_problema3():
    resultados = defaultdict(list, {(156, 5669): [32678275.075517386], (827, 163255): [4841508194.175947], (381, 38989): [474475135.7704734], (460, 50978): [834235549.1455886],
        (283, 19641): [194581544.82828414], (166, 7557): [39409355.08217458], (24, 154): [122282.10142767572], (582, 88827): [1689024174.8813944], (43, 506): [695508.5900278052],
        (612, 94380): [1963464432.7357395], (701, 113389): [2949257038.737416], (636, 105499): [2203648651.3707695], (272, 18254): [172795471.43512046], (390, 36859): [508655459.73795],
        (753, 150936): [3656146517.963426], (788, 154852): [4189066187.915283], (365, 34090): [417151716.0057178], (188, 8262): [57136679.28374485], (398, 42684): [540790119.1274743],
        (417, 47704): [621944097.580628], (807, 161449): [4499202365.33464], (851, 185532): [5275852982.233584], (80, 1738): [4439202.179635634], (84, 1507): [5120659.019261417], (318, 26324): [276024664.01661605], (760, 150715): [3758820545.894403], (630, 95854): [2141491199.4694366], (607, 94491): [1915857649.8548636],
        (43, 346): [690358.9191883826], (472, 56440): [901325567.6900619], (544, 71946): [1379241704.1147966], (940, 226251): [7109115137.031547], (236, 12752): [112889843.65487221], (440, 48896): [730290412.3028035], (373, 28984): [444818980.1943167], (314, 24632): [265701439.61922777], (359, 31534): [396866219.48721504], (337, 26662): [328299208.690502],
        (590, 86805): [1759334597.9408479], (743, 129690): [3511527837.8812084], (455, 52379): [807481469.5031617], (78, 1619): [4114476.000902799], (90, 2365): [6318950.390666613],
        (656, 105256): [2417594155.236893], (134, 4532): [20745572.09161202], (201, 11627): [69903059.03093067], (686, 125184): [2764990641.6849594], (45, 563): [796808.7762528171],
        (788, 150661): [4188827390.5181704], (785, 157453): [4141646917.2190566], (953, 229654): [7407835054.206998], (31, 254): [261962.23593042078], (839, 170639): [5055366952.588908],
        (904, 200398): [6323089184.070529], (435, 49321): [705778977.2239308], (908, 199491): [6407195338.936695], (840, 173111): [5073573702.9171095],
        (875, 184997): [5734013205.736566], (790, 147163): [4220541377.568673], (609, 90701): [1934601493.8740053], (513, 66000): [1156905354.4896798], (940, 218656): [7108670926.894477],
        (236, 13094): [112905808.94404162], (977, 241268): [7981405663.165379], (250, 17666): [134321528.90004206], (348, 29565): [361526313.87424386],
        (558, 75898): [1488413700.9881954], (564, 83622): [1537236421.1603653], (558, 81013): [1488690068.650933], (799, 157667): [4366761298.687656], (135, 3958): [21185453.44967243], (401, 40571): [552956255.8591591], (188, 8825): [57161854.036972456], (491, 56216): [1014246452.845012], (820, 167547): [4720075582.080362], (773, 148926): [3954499954.2562118],
        (51, 543): [1151506.8612195821], (853, 184756): [5313021437.083109], (645, 96490): [2297794100.4874372], (749, 142008): [3597813875.953851], (94, 2115): [7177963.729443552], (330, 26992): [308355853.76754326], (345, 29757): [352302168.4610753], (323, 26581): [289204585.17792046], (39, 467): [521390.4001256895], (484, 57623): [971675663.3637627], (891, 196651): [6054458410.433493], (311, 25825): [258249148.0772852], (465, 53306): [861774491.1762673], (480, 57984): [947872859.2519352],
        (151, 5464): [29648190.222995825], (160, 6177): [35260969.683194116], (451, 53305): [786487910.68393], (260, 16905): [150959155.9175377], (905, 199578): [6344011587.789063], (183, 8369): [52729641.21784862], (176, 7177): [46892880.78378883], (868, 188498): [5597939457.250147], (623, 99385): [2071257332.940918], (65, 926): [2379214.0571551034],
        (603, 93549): [1878276144.7295735], (585, 82012): [1714835793.9822981], (321, 27055): [283911757.05555314], (910, 209100): [6450113170.758657], (861, 190050): [5463932780.454037], (683, 122069): [2728786518.235444], (311, 22694): [258095623.23765767], (752, 146264): [3641367454.5780034], (157, 5573): [33302182.647023953], (485, 61384): [977891724.4430361],
        (490, 58530): [1008201654.2961075], (667, 112160): [2541361797.1954346], (165, 6441): [38658290.99442844], (843, 176362): [5128213105.434024], (252, 14971): [137424834.95984977], (476, 59149): [924506025.3994337], (623, 100373): [2071311632.903958], (798, 151159): [4350046523.945465], (481, 58121): [953798532.0666647], (916, 203869): [6578005493.757517], (419, 40530): [630532268.98607], (741, 132271): [3483448925.840765], (503, 60602): [1090464130.186669], (570, 80647): [1586521234.8454163],
        (983, 245677): [8129367082.854127], (435, 48031): [705712016.5035427], (208, 10034): [77337468.10483517], (77, 1440): [3953718.426225825], (133, 3717): [20254448.74438268], (562, 75447): [1520544013.6172347], (777, 140298): [4015591512.3235116], (597, 84116): [1822392355.400237], (206, 10274): [75151120.5081876], (429, 40152): [676599104.9377415], (996, 234863): [8454987900.415226], (847, 174777): [5201330178.227515], (161, 8026): [36001790.81422558], (953, 231606): [7407949441.896578], (411, 41996): [595287225.3959277],
        (393, 35337): [520365247.1239699], (908, 207410): [6407656150.609858], (41, 400): [601493.7263448428], (905, 189867): [6343446787.639766], (341, 25802): [340040766.2140439],
        (987, 237163): [8228340665.760914], (923, 206110): [6729836259.181025], (919, 213153): [6643278254.284104], (428, 50333): [672419390.6678579], (364, 34986): [413790891.58167386],
        (524, 64638): [1232641206.6069133], (163, 5999): [37259688.99184322], (132, 4100): [19820217.23443303], (613, 92748): [1972991417.976653], (71, 1450): [3110521.0947973537], (516, 62131): [1177055593.9096377], (385, 37463): [489439529.42905176], (88, 1926): [5895650.742212227], (776, 140747): [4000161985.0496235],
        (296, 21664): [222616565.88093323], (564, 81028): [1537096026.2984548], (776, 148462): [4000600570.263407], (719, 136252): [3183137944.7799935], (889, 194491): [6013726690.516502],
        (497, 55414): [1051737664.8621465], (135, 4831): [21222042.838434163], (820, 168179): [4720111794.828706], (315, 22853): [268149714.7782654], (432, 43225): [691010769.5697755], (32, 349): [290282.19088003325], (789, 147512): [4204584393.0251875],
        (702, 115776): [2962004528.7042503], (666, 116728): [2530228764.1978197], (264, 19651): [158129632.49146444], (519, 68981): [1198016014.8982782],
        (613, 85029): [1972568151.7542088], (912, 211108): [6492775337.721549], (125, 4287): [16862848.309276696],
        (877, 197925) : [5774100554.541062], (427, 48151): [667621470.3377008], (173, 7772): [44576680.234652795], (794, 146238): [4284801541.434837], (89, 2030): [6100573.903535291], (674, 111985): [2622019352.5138392], (339, 27294): [334188113.4003999],
        (976, 231581): [7956394586.935907], (701, 129540): [2950161168.426128], (475, 58089): [918654242.5695543], (30, 237): [237553.11159797688], (913, 204271): [6513719905.662317],
        (736, 140027): [3413988403.051099], (266, 18507): [161676041.76892656], (752, 151151): [3641643973.609521], (423, 43745): [648872353.0923085], (352, 31854): [374202588.68012995], (611, 98132): [1954084959.2422426], (514, 68029): [1163772771.1187978], (134, 4053): [20725522.425697543], (666, 114909): [2530127732.2566204], (641, 110867): [2256196316.462567], (669, 110669): [2564155014.6317153],
        (654, 103790): [2395518592.8497977], (836, 172149): [5001517908.075601], (874, 202176): [5715405099.843057], (456, 45883): [812460329.4717828], (957, 237423): [7501798811.777944], (989, 241572): [8278641203.029146], (987, 237163): [8228340665.760914], (923, 206110): [6729836259.181025], (919, 213153): [6643278254.284104],
        (428, 50333): [672419390.6678579], (364, 34986): [413790891.58167386], (524, 64638): [1232641206.6069133], (163, 5999): [37259688.99184322], (132, 4100): [19820217.23443303], (613, 92748): [1972991417.976653], (71, 1450): [3110521.0947973537], (516, 62131): [1177055593.9096377],
        (385, 37463): [489439529.42905176], (88, 1926): [5895650.742212227], (776, 140747): [4000161985.0496235], (296, 21664): [222616565.88093323], (564, 81028): [1537096026.2984548], (776, 148462): [4000600570.263407], (719, 136252): [3183137944.7799935], (889, 194491): [6013726690.516502],
        (497, 55414): [1051737664.8621465], (135, 4831): [21222042.838434163], (820, 168179): [4720111794.828706], (315, 22853): [268149714.7782654], (432, 43225): [691010769.5697755], (32, 349): [290282.19088003325], (789, 147512): [4204584393.0251875], (702, 115776): [2962004528.7042503], (666, 116728): [2530228764.1978197], (264, 19651): [158129632.49146444], (519, 68981): [1198016014.8982782],
        (613, 85029): [1972568151.7542088], (912, 211108): [6492775337.721549], (125, 4287): [16862848.309276696], (877, 197925) : [5774100554.541062], (427, 48151): [667621470.3377008], (173, 7772): [44576680.234652795], (794, 146238): [4284801541.434837], (89, 2030): [6100573.903535291], (674, 111985): [2622019352.5138392], (339, 27294): [334188113.4003999], (976, 231581): [7956394586.935907],
        (701, 129540): [2950161168.426128], (475, 58089): [918654242.5695543],
        (30, 237): [237553.11159797688], (913, 204271): [6513719905.662317], (736, 140027): [3413988403.051099], (266, 18507): [161676041.76892656], (752, 151151): [3641643973.609521], (423, 43745): [648872353.0923085], (352, 31854): [374202588.68012995], (611, 98132): [1954084959.2422426], (514, 68029): [1163772771.1187978],
        (134, 4053): [20725522.425697543], (666, 114909): [2530127732.2566204], (641, 110867): [2256196316.462567], (669, 110669): [2564155014.6317153], (654, 103790): [2395518592.8497977], (836, 172149): [5001517908.075601], (874, 202176): [5715405099.843057],
        (456, 45883): [812460329.4717828], (957, 237423): [7501798811.777944], (989, 241572): [8278641203.029146],
        (216, 12575): [86673704.06379862], (945, 224047): [7222831920.234635], (259, 16790): [149227237.6788367], (457, 55133): [818286239.026714], (687, 119892): [2776775700.643629], (79, 1443): [4266023.611530846], (824, 167459): [4789348031.370255], (531, 71396): [1282932983.638792], (979, 237915): [8030241483.036744], (535, 72969): [1312146627.4635403],
        (517, 67257): [1184167554.1933284], (332, 27029): [313975153.395358], (796, 164340): [4318234976.099395], (132, 4022): [19816978.01620057], (355, 30182): [383729321.3314844], (721, 139573): [3209900830.560923], (848, 172690): [5219620446.922467], (265, 15628): [159731545.3746487],
        (875, 194587): [5734568216.039322], (877, 201590): [5774312740.307361], (198, 9161): [66729905.407972485], (188, 8548): [57149471.44381443], (525, 70413): [1240002035.064151], (415, 42948): [612826430.424303],
        (812, 164505): [4583360639.61048], (703, 118213): [2974790856.6034846], (150, 6000): [29090288.03462563], (791, 151636): [4236813759.473435], (89, 2221): [6107889.569381796], (428, 48063): [672301882.9357057], (503, 59157): [1090387321.2852745], (581, 84186): [1680103991.0380175],
        (788, 157606): [4189223116.960776], (177, 7180): [47691783.23618881], (560, 80089): [1504660217.3734357], (493, 62687): [1026999270.8391789], (435, 45013): [705555379.4060752], (499, 58943): [1064639447.870052], (415, 43110): [612834767.6512438], (930, 212028): [6884200218.89852],
        (596, 90723): [1813632471.9401913], (365, 33706): [417132367.6376535], (364, 36479): [413866115.03352267], (514, 65229): [1163623441.6113613], (146, 5348): [26815430.92913384], (950, 230931): [7338291795.890662], (586, 88212): [1723960705.7644768],
        (277, 20144): [182545417.67350972], (337, 31158): [328522751.14544964], (145, 4848): [26251281.506932642], (504, 60736): [1096969728.0832303], (113, 3374): [12463293.208061626],
        (599, 92566): [1841187038.2912507], (496, 62535): [1045796258.829858], (504, 62996): [1097089871.228624], (158, 5755): [33946135.81847344], (859, 181146): [5425503585.702972], (308, 22822): [250734702.52693185], (829, 169490): [4877012205.473294], (55, 657): [1443879.8793233563], (208, 9225): [77300565.23929249],
        (688, 115019): [2788619237.119181], (76, 1459): [3804261.2071142583], (752, 133846): [3640664849.50812], (54, 722): [1369851.6411896728], (802, 153772): [4415814529.38268], (845, 187656): [5165380922.137466],
        (984, 247660): [8154276894.247941], (934, 216667): [6973529604.535905], (975, 237010): [7932322514.302052], (582, 89745): [1689074096.8898718],
        (753, 133006): [3655131841.711424], (899, 185294): [6218055081.440107], (256, 17244): [144148780.1155741], (339, 30431): [334344254.75230956], (838, 170857): [5037357942.52064], (188, 8766): [57159216.59694097],
        (332, 24075): [313828637.60029274], (130, 3506): [18915319.12866543], (999, 242700): [8531961663.913292],
        (259, 18295): [149298687.79820746], (682, 119565): [2716706924.391952], (419, 40929): [630552849.7538366], (956, 234326): [7478166656.384971], (797, 159211): [4334203816.903988],
        (982, 252083): [8105001451.333592], (656, 103657): [2417505550.30653], (589, 84333): [1750292029.2637658], (294, 21627): [218152639.71566376], (475, 58943): [918699205.7436965], (212, 12209): [81959844.57241735],
        (927, 221646): [6818468564.932416], (31, 234): [261378.05277973245], (766, 148343): [3848221575.061429]})
    puntos = map(
            lambda (n, m) :
                (n**3 + n * m,
                median(resultados[(n, m)]) / (n**3 + n * m)),
            resultados.keys())
    puntos = sorted(puntos, key=lambda tup: tup[0])
    print puntos


    plt.figure()
    plt.title("Algoritmo Cografo")
    plt.plot(map(lambda tup: tup[0], puntos),
             map(lambda tup: tup[1], puntos),
            label="Nuestro algoritmo",
            marker=".")
    plt.ylabel("Tiempo (us) / (n^3 + nm)")
    plt.xlabel("Tamano de la entrada (n^3 + nm)")
    plt.legend(loc=2)

    plt.savefig("fig.pdf")
    plt.show()

def graficar_problema3_nfijo():
    resultados = {9604: [16408024.845100781], 8970: [14698985.121798681], 10775: [18592640.36142296], 8845: [14478406.287080498],
            9359: [17206444.536466517], 10129: [18323313.76233582],
            10389: [20082969.654272832], 11158: [18965112.728588503],
            8983: [15835295.511621717], 10799: [18558316.831603706], 8862: [13922320.672991378],
            11299: [18794223.072993893], 9252: [16897233.60945229], 11689: [19153213.24250658], 11951: [20805745.872761566],
            9502: [14303750.035830084], 9911: [17033631.135282956], 9784: [17318546.095463924], 10426: [18227065.548836924], 11709: [18905564.653128676], 8771: [14563281.991432779], 9540: [15797101.818437645], 9669: [17383627.026132837], 11595: [19528509.7684405], 8782: [15306799.017718129], 8995: [15663409.844967242], 8532: [15227061.556835324], 10326: [17776039.74568655], 10592: [19289859.01543498],
            8930: [16412876.983008673], 9495: [15025498.775850056], 10988: [19863507.159185927], 9683: [16493205.565928647], 10391: [16101369.163019434], 10747: [18745450.560687814],
            9852: [17742131.634177037], 11626: [18254187.2319003], 10110: [17246236.807400174], 9727: [15182216.59028978]}
    print resultados
    puntos = map(
            lambda m :
                (m,
                median(resultados[m])),
            resultados.keys())
    puntos = sorted(puntos, key=lambda tup: tup[0])

    plt.figure()
    plt.title("Algoritmo cografo (n = 200)")
    #k = encontrar_k(puntos, lambda x: x**6)
    k1 = 598.3
    plt.plot(map(lambda tup: tup[0], puntos),
             map(lambda tup: tup[1], puntos),
            label="Nuestro algoritmo",
            marker=".")
    plt.plot(map(lambda tup: tup[0], puntos),
            map(lambda tup: k1 * tup[0] + 15340000, puntos),
             label=str(k1) + " m"
             )
    plt.ylabel("Tiempo (us)")
    plt.xlabel("Tamano de la entrada (m)")
    plt.ylim(0, 2.5e7)
    plt.legend(loc=2)

    plt.savefig("fig.pdf")
    plt.show()



def encontrar_k(puntos, f):
    ks = []
    for n, tiempo in puntos:
        f_n = 0.0
        try: f_n = f(n)
        except: pass
        print n, f_n

        if f_n == 0.0: continue
        tiempo_normalizado = tiempo / f(n)
        ks.append(tiempo_normalizado)
    return median(ks)

def normalizar(puntos, k, f):
    return [y + (k * f(x) - y) * 0.7 for x, y in puntos]

def main():
    #print general(min_n, max_n, 100)
    graficar_problema3_nfijo()

main()
